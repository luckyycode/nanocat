"

precision mediump float;

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 UV;
layout(location = 2) in vec3 vertexNormals;

uniform mat4 ModelMatrix;
uniform mat4 ProjMatrix;
out vec3 Normal0;  
out vec4 ModelViewMatrix;
uniform mat4 MVP;
out vec4 TP, FUV; // Texture pos, Fixed UV
out vec3 worldPos;


out vec4 EyeVec0;

mat3 m3( mat4 m )
{
	mat3 result;
	
	result[0][0] = m[0][0]; 
	result[0][1] = m[0][1]; 
	result[0][2] = m[0][2]; 

	result[1][0] = m[1][0]; 
	result[1][1] = m[1][1]; 
	result[1][2] = m[1][2]; 
	
	result[2][0] = m[2][0]; 
	result[2][1] = m[2][1]; 
	result[2][2] = m[2][2]; 
	
	return result;
}

void main() {
	  vec3 pos = vec3(vertexPosition_modelspace);

    mat4 InversedModel = inverse(ModelMatrix);
    ModelViewMatrix = ModelMatrix * vec4(vertexPosition_modelspace, 1.0);
    TP = ProjMatrix * ModelMatrix * vec4(vertexPosition_modelspace, 1.0);
    FUV = vec4(UV, 1.0, 1.0);
	worldPos = vec3(ModelMatrix*vec4(vertexPosition_modelspace, 1.0));
	Normal0     = (MVP * vec4(vertexNormals, 0.0)).xyz; 
	vec4 view_vertex = MVP * vec4(vertexPosition_modelspace, 1.0);
	EyeVec0 = -view_vertex;
	
    gl_Position = ProjMatrix * ModelMatrix * vec4(vertexPosition_modelspace, 1.0);
}

"

precision mediump float;

uniform float time; // time in seconds

uniform sampler2D decal;
uniform sampler2D normalMap;

in vec4 TP, FUV, ModelViewMatrix;
out vec4 color;
in vec4 EyeVec0;
in vec3 Normal0, worldPos; 
uniform vec3 cameraPos;

struct BaseLight                                                                    
{                                                                                   
    vec3 Color;                                                                     
    float AmbientIntensity;                                                         
    float DiffuseIntensity;                                                         
};                                                                                  
                                                                                    
struct DirectionalLight                                                             
{                                                                                   
    BaseLight Base;                                                                 
    vec3 Direction;                                                                 
};                                                                                  
                                                                                    
struct Attenuation                                                                  
{                                                                                   
    float Constant;                                                                 
    float Linear;                                                                   
    float Exp;                                                                      
};                                                                                  
                                                                                    
struct PointLight                                                                           
{                                                                                           
    BaseLight Base;                                                                         
    vec3 Position;                                                                          
    Attenuation Atten;                                                                      
};                                                                                          

int gNumPointLights = 2;                                                                
uniform DirectionalLight gDirectionalLight;                                                 
uniform PointLight gPointLights[3];                                                                                                      
float gMatSpecularIntensity = 0.9;                                                        
float gSpecularPower = 0.7;

   vec4 light_diffuse = vec4( 1.0, 0.9, 0.7, 1.0 );
 vec4 material_diffuse = vec4( 1.0 );
 vec4 light_specular = vec4( 1.0, 0.5, 0.3, 1.0 );
 vec4 material_specular = vec4( 0.3, 0.5, 0.8, 1.0 );
 float material_shininess = 140.6;
// http://www.thetenthplanet.de/archives/1180
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

vec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord )
{
    // assume N, the interpolated vertex normal and 
    // V, the view vector (vertex to eye)
   vec3 map = texture(normalMap, texcoord ).xyz;
   map = map * 255./127. - 128./127.;
    mat3 TBN = cotangent_frame(N, -V, texcoord);
    return normalize(TBN * map);
}

vec4 CalcLightInternal(BaseLight Light, vec3 LightDirection, vec3 Normal)                   
{                                                                                           
    vec4 AmbientColor = vec4(Light.Color, 1.0) * Light.AmbientIntensity;                   
    float DiffuseFactor = dot(Normal, -LightDirection);                                     
    vec4 DiffuseColor  = vec4(0.0);                                                  
    vec4 SpecularColor = vec4(0.0);                                                  
                                                                                            
   if (DiffuseFactor > 0.0) {                                                                
        DiffuseColor = vec4(Light.Color, 1.0) * Light.DiffuseIntensity * DiffuseFactor;    
                                                                                            
        vec3 VertexToEye = normalize(cameraPos - worldPos);                             
        vec3 LightReflect = normalize(reflect(LightDirection, Normal));                     
        float SpecularFactor = dot(VertexToEye, LightReflect);                              
        SpecularFactor = pow(SpecularFactor, gSpecularPower);                               
        if (SpecularFactor > 0.0) {                                                           
            SpecularColor = vec4(Light.Color, 1.0) *                                       
                            gMatSpecularIntensity * SpecularFactor;                         
        }                                                                                   
    }                                                                                       
                                                                                     
    return (AmbientColor + DiffuseColor + SpecularColor);                                   
} 

                                                                                     
vec4 CalcDirectionalLight(vec3 n) {                                                                                           
    return CalcLightInternal(gDirectionalLight.Base, gDirectionalLight.Direction, n); 
}                                                                                           
                                                                                            
vec4 CalcPointLight(int Index, vec3 Normal)                                                 
{                                                                                           
    vec3 LightDirection = ModelViewMatrix.xyz - gPointLights[Index].Position;                         
    float Distance = length(LightDirection);                                                
    LightDirection = normalize(LightDirection);                                             
                                                                                            
    vec4 Colors = CalcLightInternal(gPointLights[Index].Base, LightDirection, Normal);       
    float sas =  gPointLights[Index].Atten.Constant +                               
                         gPointLights[Index].Atten.Linear * Distance +                      
                         gPointLights[Index].Atten.Exp * Distance * Distance;               
                                                                                            
    return Colors / sas;                                                         
}    
vec4 light_position = vec4(-5.0, 27.0, -5.0, 1.0);
void main() {

	vec3 Normala = normalize(Normal0);                                                       
    vec4 TotalLight = CalcDirectionalLight(Normala);                                         

	vec4 tex01_color = texture(decal, FUV.xy);
  	vec4 final_color = vec4(0.2, 0.15, 0.15, 1.0) * tex01_color; 

  	vec4 LightDir0 = light_position + EyeVec0;
  
	vec3 N = normalize(Normal0);
	vec3 L = normalize(LightDir0.xyz);
 	vec3 V = normalize(EyeVec0.xyz);
  	vec3 PN = perturb_normal(N, V, FUV.xy);
  	float lambertTerm = dot(PN, L);
  	if (lambertTerm > 0.0)	{
   		final_color += light_diffuse * material_diffuse * lambertTerm * tex01_color;  
   		    	
		vec3 E = normalize(EyeVec0.xyz);
    	vec3 R = reflect(-L, PN);
		float specular = pow( max(dot(R, E), 0.0), material_shininess);
		    	
   	 	final_color += light_specular * material_specular * specular;  
  	}	

 	 color = final_color + tex01_color;
}
"