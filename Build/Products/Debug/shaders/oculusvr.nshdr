"
void main()
{

}
" 
uniform sampler2D Texture; //Image to be projected

uniform vec2 ScaleIn = vec2(4.0,2.0);
uniform vec2 Scale = vec2(0.25,0.5);

uniform vec4 HmdWarpParam = vec4(1.0,0.22,0.24,0.0);

invariant in vec2 ScreenCenter;
invariant in vec2 LensCenter;

in vec2 TexCoords;

//layout(location = 0) out vec4 outColor; // GLSL 3.30 or higher only

out vec4 outColor; // GLSL 1.50 or higher

vec2 HmdWarp(vec2 in01)
{
	vec2 theta = (in01 - LensCenter) * ScaleIn; // Scales to [-1, 1]
	float rSq = theta.x * theta.x + theta.y * theta.y;
	vec2 rvector= theta * (	HmdWarpParam.x + HmdWarpParam.y * rSq +
		HmdWarpParam.z * rSq * rSq 
		+ HmdWarpParam.w * rSq * rSq * rSq
		);
	return (LensCenter + Scale * rvector);
}


void main(void)
{
	// scale the texture coordinates for better noise
	vec2 tc = HmdWarp(TexCoords);
	tc.y = 1.0 - tc.y;
	if (!all(equal(clamp(tc, ScreenCenter-vec2(0.25,0.5), ScreenCenter+vec2(0.25,0.5)), tc)))
	{
		outColor = vec4(0.0);
	} else {
		outColor = texture(Texture,tc);
	}
}
"

layout(points) in;
layout(triangle_strip, max_vertices = 8) out;

out vec2 TexCoords;
invariant out vec2 ScreenCenter;
invariant out vec2 LensCenter;

uniform float DistortionOffset = 0.151976;

void emitQuad(vec4 screen, vec4 coords)
{
/*
	screen is a rect describing the screen space coordinates
		of the rectangle to be emitted. screen.xy is the bottom left
		corner, and screen.zw is the upper right corner.
		
	coords is a rect describing the texture coordinates to be emitted
		with coords.xy describing the bottom left corner and coords.zw
		describing the upper right corner
		
*/
	gl_Position = vec4(screen.z, screen.w, 0.0, 1.0 );
	TexCoords = vec2( coords.z, coords.w);
	EmitVertex();

	gl_Position = vec4(screen.x, screen.w, 0.0, 1.0 );
	TexCoords = vec2( coords.x, coords.w );
	EmitVertex();

	gl_Position = vec4(screen.z,screen.y, 0.0, 1.0 );
	TexCoords = vec2( coords.z, coords.y );
	EmitVertex();

	gl_Position = vec4(screen.x,screen.y, 0.0, 1.0 );
	TexCoords = vec2( coords.x, coords.y );
	EmitVertex();
	
	EndPrimitive();
}

void main()
{
	ScreenCenter = vec2(0.25,0.5);
	LensCenter = vec2(0.25 + DistortionOffset * 0.25, 0.5);
	
	emitQuad(vec4(-1.0,-1.0,0.0,1.0),vec4(0.0,1.0,0.5,0.0));

	ScreenCenter = vec2(0.75,0.5);
	LensCenter = vec2(0.75 - DistortionOffset * 0.25, 0.5);
	
	emitQuad(vec4(0.0,-1.0,1.0,1.0),vec4(0.5,1.0,1.0,0.0));

}

"