" 

precision highp float;

layout(location = 0) in vec3 model_vertexpos;
layout(location = 1) in vec2 light_uv;
layout(location = 2) in vec2 decal_uv;
layout(location = 3) in vec3 model_normalpos;
//layout(location = 4) in vec3 vTangent;

out vec2 decal_pos;
out vec2 light_pos;

out vec4 ModelViewMatrix;
out vec3 worldPos;

out vec4 EyeVec0;
out vec3 Normal0;  

uniform mat4 ModelMatrix;
uniform mat4 MVP;



void main() { 
   
    decal_pos = decal_uv;
    light_pos = light_uv;
    
    ModelViewMatrix = ModelMatrix * vec4(model_vertexpos, 1.0);

	worldPos = vec3(ModelViewMatrix * vec4(model_vertexpos, 1.0));
	
	Normal0 = (MVP * vec4(model_normalpos, 0.0)).xyz; 
	vec4 view_vertex = MVP * vec4(model_vertexpos, 1.0);
	//LightDir0 = light_position - view_vertex;
	EyeVec0 = -view_vertex;
	
    gl_Position = MVP * vec4(model_vertexpos, 1.0);
}

"

precision highp float;
precision highp sampler2D;

uniform sampler2D decalMap;    // Level textures.
uniform sampler2D lightMap;    // Level light map.
uniform sampler2D normalMap;   // Level decal normal map.

uniform sampler2D depthMap;	

struct BaseLight {                                                                                   
    vec3 Color;                                                                     
    float AmbientIntensity;                                                         
    float DiffuseIntensity;                                                         
};                                                                                  
                                                                                    
struct DirectionalLight {                                                                                   
    BaseLight Base;                                                                 
    vec3 Direction;                                                                 
};                                                                                  
                                                                                    
struct Attenuation {                                                                                   
    float Constant;                                                                 
    float Linear;                                                                   
    float Exp;                                                                      
};                                                                                  
                                                                                    
struct PointLight {                                                                                           
    BaseLight Base;                                                                         
    vec3 Position;                                                                          
    Attenuation Atten;                                                                      
};                                                                                          
  
layout(location = 0) out vec4 color;
  
int gNumPointLights = 1;              
          
          
                                                  
uniform DirectionalLight gDirectionalLight;                                                 
uniform PointLight gPointLights[4];  
uniform vec3 cameraPos;
               
uniform vec4 light_position;
                                                                                                  
float gMatSpecularIntensity = 0.9;                                                        
float gSpecularPower = 0.7;



in vec3 Normal0;   
in vec4 EyeVec0;

in vec2 decal_pos;      
in vec2 light_pos;

in vec4 ModelViewMatrix;
in vec3 worldPos;


#define PI  3.14159265

vec4 CalcLightInternal(BaseLight Light, vec3 LightDirection, vec3 Normal) {                                                                                           
    vec4 AmbientColor = vec4(Light.Color, 1.0f) * Light.AmbientIntensity;                   
    float DiffuseFactor = dot(Normal, -LightDirection);                                     
    vec4 DiffuseColor  = vec4(0.0);                                                  
    vec4 SpecularColor = vec4(0.0);                                                  
                                                                                            
    if (DiffuseFactor > 0.0) {                                                                
        DiffuseColor = vec4(Light.Color, 1.0f) * Light.DiffuseIntensity * DiffuseFactor;    
                                                                                            
        vec3 VertexToEye = normalize(cameraPos - worldPos);                             
        vec3 LightReflect = normalize(reflect(LightDirection, Normal));                     
        float SpecularFactor = dot(VertexToEye, LightReflect);                              
        SpecularFactor = pow(SpecularFactor, gSpecularPower);                               
        if (SpecularFactor > 0.0) {                                                           
            SpecularColor = vec4(Light.Color, 1.0f) *                                       
                            gMatSpecularIntensity * SpecularFactor;                         
        }                                                                                   
    }                                                                                       
                                                                                           
    return (AmbientColor + DiffuseColor + SpecularColor);                                   
} 

                                                                                            
vec4 CalcDirectionalLight(vec3 n)                                                      
{                                                                                           
    return CalcLightInternal(gDirectionalLight.Base, gDirectionalLight.Direction, n); 
}                                                                                           
                                                                                            
vec4 CalcPointLight(int Index, vec3 Normal)                                                 
{                                                                                           
    vec3 LightDirection = ModelViewMatrix.xyz - gPointLights[Index].Position;                         
    float Distance = length(LightDirection);                                                
    LightDirection = normalize(LightDirection);                                             
                                                                                            
    vec4 Colors = CalcLightInternal(gPointLights[Index].Base, LightDirection, Normal);       
    float sas =  gPointLights[Index].Atten.Constant +                               
                         gPointLights[Index].Atten.Linear * Distance +                      
                         gPointLights[Index].Atten.Exp * Distance * Distance;               
                                                                                            
    return Colors / sas;                                                          
}               

 vec4 light_diffuse = vec4( 1.0, 0.9, 0.7, 1.0 );
 vec4 material_diffuse = vec4( 1.0 );
 vec4 light_specular = vec4( 1.0, 0.5, 0.3, 1.0 );
 vec4 material_specular = vec4( 0.3, 0.5, 0.8, 1.0 );
 float material_shininess = 140.6;
// http://www.thetenthplanet.de/archives/1180
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

vec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord )
{
    // assume N, the interpolated vertex normal and 
    // V, the view vector (vertex to eye)
   vec3 map = texture(normalMap, texcoord ).xyz;
   map = map * 255./127. - 128./127.;
    mat3 TBN = cotangent_frame(N, -V, texcoord);
    return normalize(TBN * map);
}
void main() {

	// Decal map.
	vec4 DiffuseMap = texture( decalMap, decal_pos );
	
	// Light map.
	vec4 LightMap = texture( lightMap, light_pos );
	
	// Normal map.
	vec4 NormalMap = texture( normalMap, decal_pos );
	
	// Extracted normal map.
	vec3 ENormal = normalize( NormalMap.rgb * 2.0 - 1.0 );
	
	float coef = smoothstep( 1.0, 0.2, -0.5 );
	vec4 Lighty = coef * LightMap;
	
  	vec4 tex01_color = texture(decalMap, decal_pos);
  	vec4 final_color = vec4(0.2, 0.15, 0.15, 1.0) * tex01_color; 
  	tex01_color *= Lighty;

  	vec4 LightDir0 = light_position + EyeVec0;
    
	vec3 N = normalize(Normal0);
	vec3 L = normalize(LightDir0.xyz);
 	vec3 V = normalize(EyeVec0.xyz);
  	vec3 PN = perturb_normal(N, V, decal_pos);
  	float lambertTerm = dot(PN, L);
  	if (lambertTerm > 0.0)	{
   		final_color += light_diffuse * material_diffuse * lambertTerm * tex01_color;  
   		    	
		vec3 E = normalize(EyeVec0.xyz);
    	vec3 R = reflect(-L, PN);
		float specular = pow( max(dot(R, E), 0.0), material_shininess);
		    	
   	 	final_color += light_specular * material_specular * specular;  
  	}	
  	
  		
	// Ground fog.
	vec3 worldPos = ModelViewMatrix.xyz;
    vec3 waterSunColor = vec3( 0.0 ,1.0, 0.85 );
    waterSunColor = waterSunColor * 0.5;
    vec3 watercolor = ( vec3( 0.0078, 0.5176, 0.700 ) + waterSunColor) * 0.5;

	vec3 rayDir = worldPos - cameraPos;
	float dist = length( rayDir ); 
 
	const float maxFogHeight = 35.0;
	const float cs = 0.1;
	const float bs = 0.1;
 
	if( worldPos.y >= maxFogHeight - 1.0 / cs ) {		
	    //return;
	}
 
	float distInFog = dist * ( maxFogHeight - worldPos.y );
	float fogAmount = ( log( distInFog * cs ) - 1.0 ) * bs;

	fogAmount = clamp( fogAmount, 0.0, 1.0 );
  	
  	vec3 woot = final_color.rgb + (DiffuseMap.rgb * Lighty.rgb);
  	color.rgb = mix( woot, woot * watercolor, fogAmount );
  	color.a = 1.0;
	

	//vec4 finalCol = (DiffuseMap * Lighty);
	//color = finalCol;
/*
	vec3 decal_intensity, c;
  	vec4 decalTex;
  	
  	float a;
  	
  	vec3 lightDir = vec3(0.0f);
  	vec3 normal = vec3(0.0f);
    vec3 scatter = vec3(0.0);
    vec3 light = vec3(0.0);
    
	float intensity = smoothstep( 1.0, 0.2, -0.5 );
  	
  	vec3 Normala = normalize(Normal0);                                                       
    vec4 TotalLight = vec4(0.0);//CalcDirectionalLight(Normala);                                         
                                                                                            
    for ( int i = 0 ; i < gNumPointLights; i++ ) {                       
        TotalLight += intensity * CalcPointLight(i, Normala);                                          
    }                                                                                       
                    
  	light += intensity * vec3(texture(lightMap, light_pos));
  	decal_intensity = vec3( -0.5 );

	decalTex = texture( decalMap, decal_pos );
 
  	c = decal_intensity * decalTex.rgb;
  	a = decalTex.a; 
  
  	float fog = clamp( 25.0, 0.0, 1.0 );
  	float coef = smoothstep( 1.0, 0.2, -0.5 );

  	c += coef * vec3( texture(lightMap, light_pos) );
	
    vec3 _normal = texture(normalMap, decal_pos).rgb;

    vec3 N = normalize( _normal * 2.0 - 1.0 );
    
  	float axisLight = dot( N, vec3(0.0, 0.0, 1.0) );
	vec3 L = normalize( (light.rgb * 2.0) * axisLight );
 
	float nDotL = dot( N, L );
	vec3 normalVector = vec3( _normal );
 	normalVector = normalize( normalVector );
  
	vec3 reflection = normalVector;
    reflection = reflection * nDotL * 2.0;
    reflection -= L;
    float specIntensity = pow( dot( reflection, vec3(0.0, 0.0, 1.0) ), 100.6 );

	vec3 scatter_decal = (vec3(texture(decalMap, decal_pos)) / 2.0 );
	vec3 Diffuse = ( scatter_decal * light );// * max(dot(N, L), 0.0);

	vec3 E = normalize((light.rgb*2.0)*axisLight);//cameraPos-worldPos);
    vec3 R = reflect(-L,N);
    float spec = clamp(dot(vec3(0.0, 0.0, 1.0),R), 0.0, 1.0);
	
    vec3 lights = (light*pow(spec, 5.0));//*max(dot(N,L), 0.0));
	
	// Ground fog.
    vec3 waterSunColor = vec3( 0.0 ,1.0, 0.85 );
    waterSunColor = waterSunColor * 0.5;
    vec3 watercolor = ( vec3( 0.0078, 0.5176, 0.700 ) + waterSunColor) * 0.5;

	vec3 rayDir = worldPos - cameraPos;
	float dist = length( rayDir ); 
 
	const float maxFogHeight = 25.0;
	const float cs = 0.1;
	const float bs = 0.1;
 
	if( worldPos.y >= maxFogHeight - 1.0 / cs ) {		
	    return;
	}
 
	float distInFog = dist * ( maxFogHeight - worldPos.y );
	float fogAmount = ( log( distInFog * cs ) - 1.0 ) * bs;

	fogAmount = clamp( fogAmount, 0.0, 1.0 );
 
     
    vec3 Na = normalize( Normal0 );
    vec3 g_viewvector = normalize( cameraPos - worldPos );
    Na = perturb_normal( Na, g_viewvector, decal_pos );
 
    color.rgb = Na;//mix( lights, lights * watercolor, fogAmount );
    color.a = 1.0;
    */

/*
	vec3 b1 = vec3( sqrt(2.0 / 3.0), 0.0, 1.0 / sqrt(3.0) );
	vec3 b2 = vec3( -1.0 / sqrt(6.0), -1.0 / sqrt(2.0), 1.0 / sqrt(3.0) );
	vec3 b3 = vec3( -1.0 / sqrt(6.0), 1.0 / sqrt(2.0), 1.0 / sqrt(3.0) );

 	vec3 normal = normalize((no.xyz * 2.0) - 1.0 );  
   	normal.y = -normal.y;  

  	vec3 dp;  
  	dp.x = clamp(dot(normal, b1), 0.0, 1.0);  
  	dp.y = clamp(dot(normal, b2), 0.0, 1.0);  
  	dp.z = clamp(dot(normal, b3), 0.0, 1.0);  
  	dp *= dp;  
  	float sum = dot(dp, vec3(1.0, 1.0, 1.0));  
	dp *= 2.0;  

   vec3 diffuseLighting = li.rgb / dp;
    
   diffuseLighting /= sum;  
         
            color = vec4( de.rgb * diffuseLighting, 1.0 );
    ///---
    vec3 N = normalize( no.rgb * 2.0 - 1.0 );
   


    float axisLight = dot( N, vec3(0.0, 0.0, 1.0) );
	vec3 final = de.rgb * (li.rgb * 2.0) * axisLight;
	  vec3 L = normalize( (li.rgb*2.0)*axisLight );
     vec3 Diffuse = (li.rgb * li.a) * max(dot(N,L), 0.0);

    color = vec4( de.rgb + Diffuse, 1.0 );//vec4( AmbientA + DiffuseA + SpecularA, 1.0 );
    */
}
"